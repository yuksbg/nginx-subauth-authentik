# Nginx configuration for SSO authentication with auth_request
# This configuration provides authentication for multiple domains using a centralized auth service

# Upstream definition for the auth service
upstream auth_service {
    server 127.0.0.1:8080;
    # Add more auth service instances for high availability if needed
    # server 127.0.0.1:8081;
}

# Upstream definition for your main application
upstream app_backend {
    server 127.0.0.1:3000;
    # Add more app instances for load balancing if needed
    # server 127.0.0.1:3001;
}

# Rate limiting zone for auth requests
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;

# Log format for authentication events
log_format auth_log '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   'auth_user="$upstream_http_x_auth_user" '
                   'auth_email="$upstream_http_x_auth_email" '
                   'auth_domain="$upstream_http_x_auth_domain"';

# Main server block for your application
server {
    listen 80;
    listen [::]:80;
    server_name app.example.com;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name app.example.com;

    # SSL Configuration (adjust paths as needed)
    ssl_certificate /path/to/your/ssl/certificate.crt;
    ssl_private_key /path/to/your/ssl/private.key;
    ssl_certificate_chain /path/to/your/ssl/chain.crt;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Access and error logs with auth information
    access_log /var/log/nginx/app_access.log auth_log;
    error_log /var/log/nginx/app_error.log warn;

    # Auth request endpoint (internal only)
    location = /sso_oauth/auth {
        internal;
        proxy_pass http://auth_service/sso_oauth/auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header Host $http_host;

        # Timeout settings for auth requests
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;

        # Don't buffer auth responses
        proxy_buffering off;

        # Rate limiting for auth requests
        limit_req zone=auth_limit burst=20 nodelay;
    }

    # SSO OAuth endpoints (publicly accessible)
    location /sso_oauth/ {
        proxy_pass http://auth_service/sso_oauth/;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Original-URL $scheme://$http_host$request_uri;

        # Increase timeouts for OAuth flows
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Allow larger headers for OAuth responses
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # Rate limiting for login attempts
        limit_req zone=auth_limit burst=5 nodelay;

        # Special handling for login redirects
        location /sso_oauth/login {
            proxy_pass http://auth_service/sso_oauth/login;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Original-URL $scheme://$http_host$request_uri;

            # Preserve query parameters and referrer
            proxy_set_header X-Original-Args $query_string;
            if ($http_referer) {
                proxy_set_header X-Original-Referer $http_referer;
            }
        }
    }

    # Health check endpoint for auth service (optional, for monitoring)
    location = /auth/health {
        proxy_pass http://auth_service/health;
        proxy_set_header Host $http_host;
        access_log off;

        # Allow without authentication for monitoring
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }

    # Static files (if any) - served without authentication
    location /static/ {
        alias /path/to/your/static/files/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Favicon and robots.txt - served without authentication
    location ~ ^/(favicon\.ico|robots\.txt)$ {
        root /path/to/your/static/files/;
        expires 1d;
        access_log off;
    }

    # Main application - requires authentication
    location / {
        # Perform authentication check
        auth_request /sso_oauth/auth;

        # Set user information headers from auth service response
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_email $upstream_http_x_auth_email;
        auth_request_set $auth_name $upstream_http_x_auth_name;
        auth_request_set $auth_subject $upstream_http_x_auth_subject;
        auth_request_set $auth_domain $upstream_http_x_auth_domain;

        # Pass user information to backend application
        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Email $auth_email;
        proxy_set_header X-Auth-Name $auth_name;
        proxy_set_header X-Auth-Subject $auth_subject;
        proxy_set_header X-Auth-Domain $auth_domain;

        # Standard proxy headers
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Handle authentication failures
        error_page 401 = @error401;

        # Proxy to your application
        proxy_pass http://app_backend;

        # Connection and timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Handle authentication errors - redirect to login
    location @error401 {
        # Redirect to login with original URL
        return 302 /sso_oauth/login?next=$scheme://$http_host$request_uri;
    }
}

# Additional server block for another domain (example)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name another.example.com;
#
#     # SSL Configuration
#     ssl_certificate /path/to/another/ssl/certificate.crt;
#     ssl_private_key /path/to/another/ssl/private.key;
#
#     # Same auth configuration as above
#     location = /sso_oauth/auth {
#         internal;
#         proxy_pass http://auth_service/sso_oauth/auth;
#         proxy_pass_request_body off;
#         proxy_set_header Content-Length "";
#         proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
#         proxy_set_header Host $http_host;
#     }
#
#     location /sso_oauth/ {
#         proxy_pass http://auth_service/sso_oauth/;
#         proxy_set_header Host $http_host;
#         proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
#     }
#
#     location / {
#         auth_request /sso_oauth/auth;
#         auth_request_set $auth_user $upstream_http_x_auth_user;
#         auth_request_set $auth_email $upstream_http_x_auth_email;
#
#         proxy_set_header X-Auth-User $auth_user;
#         proxy_set_header X-Auth-Email $auth_email;
#         proxy_set_header Host $http_host;
#
#         error_page 401 = @error401;
#         proxy_pass http://another_app_backend;
#     }
#
#     location @error401 {
#         return 302 /sso_oauth/login?next=$scheme://$http_host$request_uri;
#     }
# }

# Map for WebSocket connection upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}