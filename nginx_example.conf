# Nginx configuration for auth_request with configurable Go auth service

upstream auth_service {
    server 127.0.0.1:8080;
}

upstream backend_app {
    server 127.0.0.1:3000;  # Your actual backend application
}

server {
    listen 80;
    server_name example.com;

    # Define the auth service prefix (should match your Go app's AUTH_URL_PREFIX)
    set $auth_prefix "/auth-service";

    # Auth service endpoints (no authentication required)
    # Adjust the regex pattern to match your configured prefix
    location ~ ^/auth-service/(auth|login|callback|logout|health|userinfo)$ {
        proxy_pass http://auth_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URL $scheme://$host$request_uri;
    }

    # Protected application
    location / {
        # Auth subrequest
        auth_request /internal-auth;

        # Pass auth headers to backend
        auth_request_set $auth_user $upstream_http_x_auth_user;
        auth_request_set $auth_email $upstream_http_x_auth_email;
        auth_request_set $auth_name $upstream_http_x_auth_name;
        auth_request_set $auth_subject $upstream_http_x_auth_subject;

        proxy_set_header X-Auth-User $auth_user;
        proxy_set_header X-Auth-Email $auth_email;
        proxy_set_header X-Auth-Name $auth_name;
        proxy_set_header X-Auth-Subject $auth_subject;

        # Redirect to login on 401
        error_page 401 = @error401;

        # Proxy to your backend application
        proxy_pass http://backend_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Handle authentication errors
    location @error401 {
        # Redirect to login with the original URL (using configured prefix)
        return 302 /auth-service/login?next=$scheme://$host$request_uri;
    }

    # Internal auth endpoint
    location = /internal-auth {
        internal;
        proxy_pass http://auth_service/auth-service/auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URL $scheme://$host$request_uri;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Alternative configuration without URL prefix (if running with default settings)
# server {
#     listen 80;
#     server_name no-prefix.example.com;
#
#     # Auth service endpoints (no prefix)
#     location ~ ^/(auth|login|callback|logout|health|userinfo)$ {
#         proxy_pass http://auth_service;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Original-URL $scheme://$host$request_uri;
#     }
#
#     # Protected application
#     location /app/ {
#         auth_request /internal-auth-no-prefix;
#
#         # Same auth_request_set directives...
#
#         error_page 401 = @error401_no_prefix;
#         proxy_pass http://backend_app;
#         # Same proxy headers...
#     }
#
#     location @error401_no_prefix {
#         return 302 /login?next=$scheme://$host$request_uri;
#     }
#
#     location = /internal-auth-no-prefix {
#         internal;
#         proxy_pass http://auth_service/auth;
#         # Same configuration...
#     }
# }